networks:
  pulsar:
    driver: bridge
  sidecar:
    driver: bridge
services:
# Start zookeeper
  zookeeper:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: zookeeper
    restart: on-failure
    networks:
      - pulsar
    volumes:
      - ./data/zookeeper:/pulsar/data/zookeeper
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
    command: >
      bash -c "bin/apply-config-from-env.py conf/zookeeper.conf && \
             bin/generate-zookeeper-config.sh conf/zookeeper.conf && \
             exec bin/pulsar zookeeper"
    healthcheck:
      test: ["CMD", "bin/pulsar-zookeeper-ruok.sh"]
      interval: 10s
      timeout: 5s
      retries: 30

# Init cluster metadata
  pulsar-init:
    container_name: pulsar-init
    hostname: pulsar-init
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    networks:
      - pulsar
    command: bin/pulsar initialize-cluster-metadata --cluster cluster-a --zookeeper zookeeper:2181 --configuration-store zookeeper:2181 --web-service-url http://broker:8080 --broker-service-url pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy

# Start bookie
  bookie:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: bookie
    restart: on-failure
    networks:
      - pulsar
    environment:
      - clusterName=cluster-a
      - zkServers=zookeeper:2181
      - metadataServiceUri=metadata-store:zk:zookeeper:2181
    depends_on:
      zookeeper:
        condition: service_healthy
      pulsar-init:
        condition: service_completed_successfully
  # Map the local directory to the container to avoid bookie startup failure due to insufficient container disks.
    volumes:
      - ./data/bookkeeper:/pulsar/data/bookkeeper
    command: bash -c "bin/apply-config-from-env.py conf/bookkeeper.conf
      && exec bin/pulsar bookie"

# Start broker
  broker:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: broker
    hostname: broker
    restart: on-failure
    networks:
      - pulsar
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - zookeeperServers=zookeeper:2181
      - clusterName=cluster-a
      - managedLedgerDefaultEnsembleSize=1
      - managedLedgerDefaultWriteQuorum=1
      - managedLedgerDefaultAckQuorum=1
      - advertisedAddress=broker
      #Si se realiza una ejecución manual del microservicio desde el IDE, se debe usar esta línea:
      - advertisedListeners=external:pulsar://127.0.0.1:6650
      #Si se realiza una ejecución completa de todo (incluido el microservicio) con docker compose, se debería usar esta línea en lugar de la anterior para que se comunique con el contenedor broker dentro de una misma ejecución
      # - advertisedListeners=external:pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy
      bookie:
        condition: service_started
    ports:
      - "6650:6650"
      - "8080:8080"
    command: bash -c "bin/apply-config-from-env.py conf/broker.conf
      &&  exec bin/pulsar broker"
  
  # Servicios de alpespartners
  alpespartners:
    container_name: alpespartners
    hostname: alpespartners
    image: alpespartners/flask 
    profiles: ["alpespartners", "monolito"]
    networks:
      - sidecar
      - pulsar
    labels:
      SidecarDiscover: "false"
    depends_on:
      - broker
    environment:
      - alpespartners_ADDRESS=alpespartners
      - PULSAR_ADDRESS=broker
    ports:
      - "5000:5000"
  #Configura retención para el micro/asociaciones para usar Event Sourcing
  pulsar-retention-topic:
    image: apachepulsar/pulsar:latest
    container_name: pulsar-retention-topic
    profiles: ["pulsar"]
    networks:
      - pulsar
    depends_on:
      broker:
        condition: service_started
    command: >
      /bin/bash -c "
        sleep 10 &&
        bin/pulsar-admin namespaces set-retention public/default --size -1 --time -1&&
        echo '✅ Retention configurado en el tópico eventos-asociacion'
      "

  postgres:
    image: postgres:15
    container_name: postgres
    hostname: postgres
    profiles: ["db"]
    restart: on-failure
    networks:
      - pulsar
      - sidecar
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: alpespartners
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d alpespartners"]
      interval: 10s
      timeout: 5s
      retries: 5

      
  # MySQL8
  db_asociaciones_estrategicas:
    image: mysql:8.0.28
    hostname: mysqldb
    container_name: mysqldb
    cap_add:
      - SYS_NICE
    restart: always
    environment:
      MYSQL_DATABASE: asociaciones_estrategicas
      MYSQL_ROOT_PASSWORD: pwdadmin
      TZ: UTC
    command: --default-time-zone='+00:00'
    profiles: ["asociaciones_estrategicas", "db_asociaciones_estrategicas"]
    networks:
      - pulsar
    ports:
      - "3306:3306"
    volumes:
      - ./data/mysql:/var/lib/mysql
